RefactoringTool: Skipping optional fixer: buffer
RefactoringTool: Skipping optional fixer: idioms
RefactoringTool: Skipping optional fixer: set_literal
RefactoringTool: Skipping optional fixer: ws_comma
RefactoringTool: Refactored ./gcipher/py3/unisos/gcipher/MainCLI.py
RefactoringTool: Files that were modified:
RefactoringTool: ./gcipher/py3/unisos/gcipher/MainCLI.py
--- ./gcipher/py3/unisos/gcipher/MainCLI.py	(original)
+++ ./gcipher/py3/unisos/gcipher/MainCLI.py	(refactored)
@@ -2,9 +2,9 @@
 
 from sys import argv, stdin, stdout, stderr, exit
 
-import Const
-from cipher.KeyedCipher import InvalidKey
-from AutomaticClass import AutomaticClass
+from . import Const
+from .cipher.KeyedCipher import InvalidKey
+from .AutomaticClass import AutomaticClass
 
 
 class MainCLI:
@@ -64,7 +64,7 @@
                 self._runProxyMode(operations, args)
             else:
                 self._runFilterMode(operations, args)
-        except GetoptError, e:
+        except GetoptError as e:
             usage(e.msg, 1)
 
     def _runProxyMode(self, operations, args):
@@ -73,7 +73,7 @@
         This method does not return.
 
         """
-        from Proxy import Proxy
+        from .Proxy import Proxy
         import asyncore
         import socket
         if not len(args) == 3:
@@ -86,7 +86,7 @@
                 self._composeOperations(operations),
                 self._composeOperations(operations, True))
             asyncore.loop()
-        except socket.error, e:
+        except socket.error as e:
             stderr.write("%s: socket error: %s\n" % (Const.NAME, e.args[1]))
             exit(1)
 
@@ -128,7 +128,7 @@
                 input.close()
             if output != stdin:
                 output.close()
-        except IOError, e:
+        except IOError as e:
             stderr.write("%s: %s: %s\n" % (Const.NAME, e.filename, e.strerror))
             exit(1)
 
@@ -192,7 +192,7 @@
                 return cipherInstance.decrypt
         except ImportError:
             usage("failed to import cipher '%s'" % self.cipher, 1)
-        except InvalidKey, e:
+        except InvalidKey as e:
             # usage("invalid key '%s' for cipher '%s'; it's not '%s'." %
             #     (e.key, operation.cipher, e.keyDescription), 1)
             usage("invalid key '%s' for cipher '%s'; it's not '%s'." %
